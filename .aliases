# ls {{{
alias la='ls -AFlh --color=tty'
alias ll='ls -lFh --color=tty'
alias ls='ls --color=tty'

# }}}
# sshuttle {{{
alias sshide='sshuttle -r aws 0/0 --dns --daemon --pidfile /tmp/sshuttle.pid'
alias sshide-dl='sshuttle -r aws 0/0 --dns --daemon --pidfile /tmp/sshuttle.pid --no-latency-control'
alias sshive='sshuttle -r aws 0/0 --dns --verbose'
alias sshive-dl='sshuttle -r aws 0/0 --dns --verbose --no-latency-control'

# }}}
# touchpad {{{
alias toff='xinput --disable SynPS/2\ Synaptics\ TouchPad'
alias tonn='xinput --enable SynPS/2\ Synaptics\ TouchPad'
alias ton='tonn && (sleep 30 && toff) &' # shitty, but works for me

# }}}
# npm/yarn {{{
alias ni='yarn'
alias nrb='yarn run build'
alias nrt='yarn run test'
alias nrw='yarn start || yarn run watch'

# }}}
# configure eslint {{{
eslint-none23 () {
    ( cd $(npm root)/..
        yarn add -D babel-eslint eslint{,-config-none23,-plugin-{flowtype,import,jest,jsx-a11y,node,promise,react,standard}}

        [[ -a .eslintrc.js ]] && mv .eslintrc.js{,.old}
        [[ -a .eslintrc ]] && mv .eslintrc{,.old}
        [[ -a .eslintrc.json ]] && mv .eslintrc.json{,.old}
        [[ -a .eslintrc.yml ]] && mv .eslintrc.yml{,.old}

        if [[ -a ~/.eslintrc.js ]]; then
            cp ~/.eslintrc.js .eslintrc.js
        else
            echo "const path = require('path');\nmodule.exports = {\n\ \ root: true,\n\ \ extends: [ 'none23' ],\n\ \ settings: {\n\ \ \ \ 'import/resolver': {\n\ \ \ \ \ \ node: { paths: path.resolve(__dirname, 'src') },\n\ \ \ \ },\n\ \ },\n};" > .eslintrc.js
        fi
    )
}
# }}}
# git {{{
## add all, commit, and push {{{
GG () {
    git add .
    [[ "$1" ]] && git commit -m "$@" || git cz
    git push origin HEAD
}
## }}}
newBranch () {
    [[ "$1" ]] \
        && git checkout master \
        && git pull origin master \
        && git checkout -b "$1"
}
# }}}
# dotfiles github {{{
dot () {
    if [[ -d /home/n/none23/dotfiles ]]; then
        ( cd /home/n/none23/dotfiles && GG "updated" )
    fi
}
# }}}
# installed packages github {{{
pkglist () {
    if [[ -d /home/n/none23/pkglist ]]; then
        ( cd /home/n/none23/pkglist && yaourt -Qnq > ./official_repos && yaourt -Qmq > ./aur && GG "updated" )
    fi
}
# }}}
# yaourt {{{
alias y='yaourt'
alias Y='yaourt -Syua && npm update -g && pkglist'
alias Yy='yaourt -Syy'
alias Yc='yaourt -Sc'
alias Ycc='yaourt -Scc && npm cache clean --force'
alias yor='yaourt -Rsc $(yaourt -Qtdq)'
# }}}
# wireless {{{
alias N='nmtui || (sudo NetworkManager && sleep 1 && nmtui)'
alias nmkill='sudo killall NetworkManager && echo "NetworkManager killed" || echo "Nothing to kill"'
alias monup='sudo ifconfig wlp7s0 down && sudo iwconfig wlp7s0 mode monitor && sudo ifconfig wlp7s0 up'
alias mondown='sudo ifconfig wlp7s0 down && sudo iwconfig wlp7s0 mode managed && sudo ifconfig wlp7s0 up'
alias foilhat='sudo rfkill block all'
alias airod='sudo airodump-ng -i wlp7s0 --wps --manufacturer'
alias rvr='sudo reaver -i wlp7s0 -K 1 -vv -b'
alias silentjam='sudo iwconfig && sudo wifijammer -d --world > /dev/zero &'

wmac () {
    if [[ -n "$1" ]]; then
        sudo macchanger -b --mac="$1" wlp7s0
    else
        sudo macchanger -ab wlp7s0
    fi
}
# }}}
# multi-screen {{{
_LVDS='LVDS1'
_HDMI='HDMI1'

_prerandr () {
    xrandr --newmode "1360x768_60.00"  84.72  1360 1424 1568 1776  768  769  772  795  -HSync +Vsync \
    && xrandr --addmode $HDMI 1360x768_60.00 \
    && $1 \
    || $1
}

alias _qrandr="
    xrandr \
        --output $HDMI \
            --rotate normal \
            --mode 1360x768_60.00 \
            --pos 1366x0 \
        --output $LVDS \
            --rotate normal \
            --mode 1366x768 \
            --pos 0x0 \
            --primary \
            --preferred"

alias arandr='_prerandr arandr'
alias qrandr='_prerandr _qrandr'
# }}}
# dpms control {{{
alias wkp='xset dpms force on'
alias pretendtosleep='xset dpms force off'
# }}}
# chromium-tor {{{
_start_tor_if_not_running () {
    if [[ -n "$(ps -ef | grep tor | grep -v grep)" ]]; then
        echo "tor already running"
    else
        sudo systemctl start tor.service
        echo "tor started"
    fi
}

chromium-tor () {
    _start_tor_if_not_running
    chromium --proxy-server="socks5://localhost:9050" --host-resolver-rules="MAP * 0.0.0.0 , EXCLUDE localhost"
}

# }}}
# shutdown/reboot {{{
shutdown () {
    if [[ -a /usr/bin/shutdown ]]; then
        /usr/bin/shutdown "$@"
    else
        sudo systemctl poweroff
    fi
}

reboot () {
    if [[ -a /usr/bin/reboot ]]; then
        /usr/bin/reboot
    else
        sudo systemctl reboot
    fi
}

# }}}
# add sudo {{{
ifconfig () {
    /usr/bin/ifconfig "$@" || sudo /usr/bin/ifconfig "$@"
}

iwconfig () {
    /usr/bin/iwconfig "$@" || sudo /usr/bin/iwconfig "$@"
}

nmap () {
    /usr/bin/nmap "$@" || sudo /usr/bin/nmap "$@"
}

alias aircheck='sudo aircheck'
alias cfdisk='sudo cfdisk'
alias cgdisk='sudo cgdisk'
alias du='sudo du'
alias fdisk='sudo fdisk'
alias fstrim='sudo fstrim'
alias gdisk='sudo gdisk'
alias gparted='sudo gparted'
alias hdparm='sudo hdparm'
alias lsmod='sudo lsmod'
alias masscan='sudo masscan'
alias minicom='sudo minicom'
alias mkinitcpio='sudo mkinitcpio'
alias mkfs.ext4='sudo mkfs.ext4'
alias mkfs.ext3='sudo mkfs.ext3'
alias mkfs.ext2='sudo mkfs.ext2'
alias modprobe='sudo modprobe'
alias mount='sudo mount'
alias rfkill='sudo rfkill'
alias rmmod='sudo rmmod'
alias skill='sudo kill'
alias skillall='sudo killall'
alias systemctl='sudo systemctl'
alias umount='sudo umount'
alias wifite='sudo wifite'
alias wifijammer='sudo wifijammer'
# }}}
# extract {{{
extract () {
    if [ -z "$1" ]; then
         # display usage if no parameters given
         echo "Usage: extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
         return 1
    else
        for n in $@; do
            if [ -f "$n" ] ; then
                case "${n%,}" in
                *.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                             tar xvf "$n"       ;;
                *.lzma)      unlzma ./"$n"      ;;
                *.bz2)       bunzip2 ./"$n"     ;;
                *.rar)       unrar x -ad ./"$n" ;;
                *.gz)        gunzip ./"$n"      ;;
                *.zip)       unzip ./"$n"       ;;
                *.z)         uncompress ./"$n"  ;;
                *.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
                             7z x ./"$n"        ;;
                *.xz)        unxz ./"$n"        ;;
                *.exe)       cabextract ./"$n"  ;;
                *)
                            echo "extract: '$n' - unknown archive method"
                            return 1
                            ;;
                esac
            else
                echo "'$n' - file does not exist"
                return 1
            fi
        done
    fi
}
# }}}
# misc {{{
pn () {
    [[ ! "$*" ]] && ping -c 5 -i 0.2 8.8.8.8 || ping -c 5 -i 0.2 "$*"
}

rr () {
    [[ $1 ]] && ranger "$*" || ranger "$(pwd)"
}

zathura () {
    ( [[ $1 ]] && /usr/bin/zathura $1 || /usr/bin/zathura ) &
}

alias dd='sudo dd bs=512K status=progress'
alias py='ipython3'
alias df='df -h'
alias du='du -h '
alias myip='curl -s "https://httpbin.org/ip" | jq -r ".origin"'
alias lt='lt -l localhost -s none23'
alias remove_tern_port='for ternportfile in ${$(find -name .tern-port)}; do rm "$ternportfile" && echo "removed $ternportfile" ; done'
alias flow='$(npm bin)/flow'
alias jest='$(npm bin)/jest'
alias eslint='$(npm bin)/eslint'
alias stylelint='$(npm bin)/stylelint'
# }}}
# global aliases {{{
alias -g vim='nvim'
alias -g vimdiff='nvim -d'
alias -g gvim='konsole -e nvim'
alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
# }}}

# vim:filetype=zsh:foldmethod=marker:foldlevel=2
