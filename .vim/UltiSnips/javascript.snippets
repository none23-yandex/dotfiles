snippet ind "index file" b
// @flow strict

import $1 from './${1:File}';

export * from './${1:File}';
export default $1;
endsnippet

snippet ccc "class component" b
// @flow strict

import * as React from 'react';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import cn from 'classnames';

import styles from './$1.scss';

const b = key => styles[key];

type Props = {|
|};

type State = {|
|};

class ${1:ClassComponent} extends React.Component<Props, State> {
	static defaultProps = {
	};

  state = {
  };

	componentDidMount = () => {
  };

	componentDidUpdate = (prevProps: Props, prevState: State) => {
  };

	componentWillUnmount = () => {
  };

	render = () => {
		return (
			<div className={b('$1')}>
			</div>
		);
	};
};

const mapStateToProps = createStructuredSelector({
});

const mapDispatchToProps = {
};

export default connect(
	mapStateToProps,
	mapDispatchToProps,
)($1);

endsnippet

snippet ffb "flow functional BEM component" b
// @flow strict

import * as React from 'react';

import styles from './$1.scss';

const b = key => styles[key]

type Props = {|
|};

const $1 = ({
}: Props) => (
	<div className={b('$1')}>
	</div>
);

export default $1;
endsnippet

snippet fcfb "flow connected functional BEM component" b
// @flow strict

import * as React from 'react';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import b_ from 'b_';

import Component from 'components/Component/Component';

import { action } from 'modules/router/actions';
import { selector } from 'modules/router/selectors';
import type { Type } from 'modules/router/model';

import styles from './$1.scss';

const b = key => styles[key]

type Props = {|
|};

const $1 = ({
}: Props) => (
	<div} className={b('$1')}>
	</div>
);

const mapStateToProps = createStructuredSelector({
});

const mapDispatchToProps = {
};

export default connect(
	mapStateToProps,
	mapDispatchToProps,
)($1);
endsnippet

snippet fff "flow functional component" b
// @flow strict

import * as React from 'react';

import styles from './$1.scss';

const b = key => styles[key]


type Props = {
	className: string,
	children: React.Node
};

const $1 = (props: Props) => {
	const {
		className,
		children,
	} = props;

	return (
		<div className="" className={b('$1')}>
		</div>
	);
};

$1.defaultProps = {
	children: null,
};

export default $1;
endsnippet

snippet im "import" b
import $1 from '$2';
endsnippet

snippet imn "import {...}" b
import { $1 } from '$2';
endsnippet

snippet ir "import React" b
import * as React from 'react';
$0
endsnippet

snippet exa "export as"
export { $1 as $2 };
endsnippet

snippet exd "export default"
export default $1;
endsnippet

snippet exf "export from"
export $1 from '$2';
endsnippet

snippet cdm "component did mount"
componentDidMount () {
	$0
}
endsnippet

snippet cdup "component did update"
componentDidUpdate (prevProps, prevState) {
	$0
}
endsnippet

snippet scup "should component update"
shouldComponentUpdate (nextProps, nextState) {
	$0
}
endsnippet

snippet cwum "component will unmount"
componentWillUnmount () {
	$0
}
endsnippet

snippet dp "static defaultProps"
static defaultProps = {
	className: '',
};
$0
endsnippet

snippet dbg "debugger"
debugger;
$0
endsnippet

snippet mapdbg "map debugger"
.map(x => { debugger; return x; })
$0
endsnippet

snippet maplog "map log"
.map(x => { console.log(x); return x; })
$0
endsnippet

snippet edf "eslint-disable"
/* eslint-disable $1 */
/* eslint-enable $1 */
endsnippet

snippet edl "eslint-disable-line"
// eslint-disable-line $1
endsnippet

snippet edn "eslint-disable-next-line"
// eslint-disable-next-line $1
endsnippet

snippet fdn "flowlint-next-line"
// flowlint-next-line $1
endsnippet

snippet prig "prettier ignore"
// prettier-ignore $1
endsnippet
