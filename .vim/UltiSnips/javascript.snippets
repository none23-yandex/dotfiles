snippet ccc "create class component" b
import React, {Component} from 'react'
import PropTypes from 'prop-types'

class ${1:ClassComponent} extends Component {
  constructor (props) {
    super(props)
    this.state = {
      $5
    }
  }

  componentWillUpdate () {} 
  componentDidUpdate () {}
  componentWillMount () {}
  componentDidMount () {}
  componentWillUnmount () {}

  render () {
    return (
      <${2:div} $3 >
        $4
      </$2>
    )
  }
}
$1.propTypes = {
  className: PropTypes.string
, onClick: PropTypes.func
, children: PropTypes.arrayOf(
    PropTypes.oneOfType([
      PropTypes.node
    , PropTypes.element
    , PropTypes.func
    ])
  ).isRequired
}

export default $1
endsnippet

snippet ffc "create simple functional component" b
import React from 'react'
import PropTypes from 'prop-types'

const ${1:functionalComponent} = ({$4 = '', $6 = null, $8 = null}) => (
  <${2:div}>
    $3
  </$2>
)
$1.propTypes = {
  ${4:className}: PropTypes.${5:string}
, ${6:onClick}: PropTypes.${7:func}
, ${8:children}: PropTypes.${9:arrayOf(
    PropTypes.oneOfType([
      PropTypes.node
    , PropTypes.element
    , PropTypes.func
    ])
  )}.isRequired
}

export default $1
endsnippet

snippet fcc "create simple functional component" b
import React from 'react'
import PropTypes from 'prop-types'

const ${1:functionalComponent} = (${2:props}) => {
  return (
    ${3:<div>
      $4
    </div>}
  )
}
$1.propTypes = {
  $2: PropTypes.${5:string}.isRequired
, $2: PropTypes.${6:string}.isRequired
}

export default $1
endsnippet

snippet ir "import React" b
import React from 'react'
$0
endsnippet

snippet irpt "import React, PropTypes" b
import React, {Component} from 'react'
import PropTypes from 'prop-types'
$0
endsnippet

snippet irc "import React, {Component} from 'react'" b
import React, {Component} from 'react'
$0
endsnippet

snippet cdm "component did mount" b
componentDidMount() {
  $0
}
endsnippet

snippet cdup "component did update" b
componentDidUpdate(prevProps, prevState) {
  $0
}
endsnippet

snippet scup "should component update"
shouldComponentUpdate(nextProps, nextState) {
  $0
}
endsnippet

snippet cwm "component will mount" b
componentWillMount() {
  $0
}
endsnippet

snippet cwum "component will unmount" b
componentWillUnmount() {
  $0
}
endsnippet

snippet cwrp "component will receive props" b
componentWillReceiveProps(nextProps) {
  $0
}
endsnippet

snippet cwup "component will update" b
componentWillUpdate(nextProps, nextState) {
  $0
}
endsnippet

snippet gdp "get default props" b
getDefaultProps() {
  return {
	  $0
  }
}
endsnippet

snippet ren
render() {
  return (
    $0
  )
}
endsnippet

snippet construct "construct state" b
constructor(props) {
  super(props)

  ${1:this.state = {
    $2
  }}
}

$0
endsnippet

snippet gis "get initial state" b
getInitialState() {
  return {
    $0
  }
}

$0
endsnippet

snippet pt "propTypes" b
propTypes: {
  ${1}: React.PropTypes.${2:string}
},
endsnippet

snippet sest "set state" b
this.setState({
  ${1}: ${2}
})$0
endsnippet


snippet jp "JSON.parse()"
JSON.parse($0)
endsnippet

snippet jst "JSON.stringify()"
JSON.stringify($0)
endsnippet

snippet lg "console.log"
console.log.debug(JSON.stringify($0))
endsnippet

snippet edl "eslint-disable-line"
// eslint-disable-line $0
endsnippet
