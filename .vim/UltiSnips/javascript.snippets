snippet ccc "class component" b
import React, { Component } from 'react';
import PropTypes from 'prop-types';

import './styles.css';
import enhance from './enhance';

class ${1:ClassComponent} extends Component {
static propTypes = {
  className: PropTypes.string,
};

static defaultProps = {
  className: '',
};

constructor (props) {
  super(props);
  this.state = {
  $5,
  };
}

componentDidMount () {}
componentWillUnmount () {}

render () {
  return (
    <${2:div}>
    </$2>
  );
}
};

export { $1 as Component };
export default enhance($1);
endsnippet

snippet ffc "functional component" b
import React from 'react';
import PropTypes from 'prop-types';

import './styles.css';
import enhance from './enhance';

const ${1:functionalComponent} = ({ ${3:prop}, ...props }) => (
<${2:div}>
</$2>
);

$1.propTypes = {
className: PropTypes.string,
};

$1.defaultProps = {
className: '',
};

export { $1 as Component };
export default enhance($1);
endsnippet

snippet fcc "functional component" b
import React from 'react';
import PropTypes from 'prop-types';

import './styles.css';
import enhance from './enhance';

const ${1:functionalComponent} = ({ ${3:prop}, ...props }) => {
return (
  <${2:div}>
  </$2>
);
};

$1.propTypes = {
className: PropTypes.string,
};

$1.defaultProps = {
className: '',
};

export { $1 as Component };
export default enhance($1);
endsnippet

snippet im "import" b
import $1 from '${1: $2}';
endsnippet

snippet im "import {...}" b
import { $1 } from '$2';
endsnippet

snippet ir "import React" b
import React from 'react';
$0
endsnippet

snippet irc "import React, Component" b
import React, { Component } from 'react';
$0
endsnippet

snippet ipt "import PropTypes" b
import PropTypes from 'prop-types';
$0
endsnippet

snippet exa "export as"
export { $1 as $2 };
endsnippet

snippet exd "export default"
export default $1;
endsnippet

snippet exf "export from"
export $1 from '$2';
endsnippet

snippet construct "constructor"
constructor (props) {
super(props);

this.state = {
  $0,
};
}
endsnippet

snippet cdm "component did mount"
componentDidMount () {
$0
}
endsnippet

snippet cdup "component did update"
componentDidUpdate (prevProps, prevState) {
$0
}
endsnippet

snippet scup "should component update"
shouldComponentUpdate (nextProps, nextState) {
$0
}
endsnippet

snippet cwm "component will mount"
componentWillMount () {
$0
}
endsnippet

snippet cwum "component will unmount"
componentWillUnmount () {
$0
}
endsnippet

snippet cwrp "component will receive props"
componentWillReceiveProps (nextProps) {
$0
}
endsnippet

snippet cwup "component will update"
componentWillUpdate (nextProps, nextState) {
$0
}
endsnippet

snippet ren "render"
render () {
return (
  $0
);
}
endsnippet

snippet gis "get initial state"
getInitialState () {
return {
  $0,
};
}
endsnippet

snippet sst "set state"
this.setState({
$0,
});
endsnippet

snippet spt "static propTypes"
static propTypes = {
className: PropTypes.string,
};
$0
endsnippet

snippet sdp "static defaultProps"
static defaultProps = {
className: '',
};
$0
endsnippet

snippet dbg "debugger"
debugger;
$0
endsnippet

snippet edf "eslint-disable"
/* eslint-disable-line $1 */
endsnippet

snippet edl "eslint-disable-line"
// eslint-disable-line $1
endsnippet

snippet edn "eslint-disable-next-line"
// eslint-disable-next-line $1
endsnippet
